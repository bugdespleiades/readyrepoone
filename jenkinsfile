pipeline {
    agent any

    parameters {
        choice(name: "env", choices :['dev', 'prod'], description: 'environnement de deploeiemnt dev ou prod')
        booleanParam(name: 'DESTROY', defaultValue: false, description: 'Détruire infra apres déploiement?')
    }

    environment {
        AWS_DEFAULT_REGION = 'us-east-1'
        TF_VAR_env = "${params.env}"
    }

    stages {
        stage('iac:terraform plan') {
            when {
                expression { params.DESTROY == false }
            }
            steps {
                script {
                    sh '''
                        terraform init \
                            -backend-config="bucket=pcl-terraform-state-bucket-eu-west-1" \
                            -backend-config="key=terraform/${TF_VAR_env}/state" \
                            -backend-config="region=$AWS_DEFAULT_REGION" \
                            -backend-config="dynamodb_table=pcl-terraform-lock-table-eu-west-1-${TF_VAR_env}"
                        terraform plan
                    '''
                }
            }
        }

        stage('confirm:deploy') {
            when {
                expression { params.DESTROY == false }
            }
            steps {
                input(id: 'confirm', message: """
                    You choose to deploy:
                    branch: ${env.GIT_BRANCH}
                    Do you confirm the deployment""")
            }
        }

        stage('iac:terraform apply') {
            when {
                expression { params.DESTROY == false }
            }
            steps {
                script {
                    sh '''
                        terraform init \
                            -backend-config="bucket=pcl-terraform-state-bucket-eu-west-1" \
                            -backend-config="key=terraform/${TF_VAR_env}/state" \
                            -backend-config="region=$AWS_DEFAULT_REGION" \
                            -backend-config="dynamodb_table=pcl-terraform-lock-table-eu-west-1-${TF_VAR_env}"
                        terraform apply -auto-approve
                    '''
                }
            }
        }

        stage('iac:terraform destroy') {
            when {
                expression { params.DESTROY == true }
            }
            steps {
                script {
                    sh '''
                        terraform init \
                            -backend-config="bucket=pcl-terraform-state-bucket-eu-west-1" \
                            -backend-config="key=terraform/${TF_VAR_env}/state" \
                            -backend-config="region=$AWS_DEFAULT_REGION" \
                            -backend-config="dynamodb_table=pcl-terraform-lock-table-eu-west-1-${TF_VAR_env}"
                        terraform destroy -auto-approve
                    '''
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}